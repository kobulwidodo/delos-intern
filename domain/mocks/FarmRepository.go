// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	domain "go-template/domain"

	mock "github.com/stretchr/testify/mock"
)

// FarmRepository is an autogenerated mock type for the FarmRepository type
type FarmRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: farm
func (_m *FarmRepository) Create(farm domain.Farm) (uint, error) {
	ret := _m.Called(farm)

	var r0 uint
	if rf, ok := ret.Get(0).(func(domain.Farm) uint); ok {
		r0 = rf(farm)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Farm) error); ok {
		r1 = rf(farm)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: farm
func (_m *FarmRepository) Delete(farm domain.Farm) error {
	ret := _m.Called(farm)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Farm) error); ok {
		r0 = rf(farm)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *FarmRepository) GetAll() ([]domain.Farm, error) {
	ret := _m.Called()

	var r0 []domain.Farm
	if rf, ok := ret.Get(0).(func() []domain.Farm); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Farm)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *FarmRepository) GetById(id uint) (domain.Farm, error) {
	ret := _m.Called(id)

	var r0 domain.Farm
	if rf, ok := ret.Get(0).(func(uint) domain.Farm); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.Farm)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: farm
func (_m *FarmRepository) Update(farm domain.Farm) error {
	ret := _m.Called(farm)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Farm) error); ok {
		r0 = rf(farm)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
